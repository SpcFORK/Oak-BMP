// oak build
__Oak_Modules := {}
__Oak_Import_Aliases := ?
fn __oak_modularize(name, module) __Oak_Modules.(name) := module
fn __oak_module_import(name) if ___runtime_lib?(name) {
	true -> import(name)
	_ -> if type(module := __Oak_Modules.(name)) {
		:null -> if module := __Oak_Modules.(__Oak_Import_Aliases.(name)) {
			? -> import(name)
			_ -> {
				mod := module()
				__Oak_Modules.(name) := mod
				mod
			}
		}
		:function -> {
			m := module()
			__Oak_Modules.(name) := m
			m
		}
		_ -> module
	}
}
(__oak_modularize('entry.oak',fn()(hlp:=__oak_module_import('hlp.oak'),bmp:=__oak_module_import('src/bmp.oak'),if hlp.platform?(){:web->window.bmp:=bmp,:node->module.exports:=bmp},{bmp:bmp,hlp:hlp})),__oak_modularize('hlp.oak',fn()(std:=__oak_module_import('std'),fn isJSMode?()globalThis !=?,fn s(pl)if isJSMode?(){res:=string(pl)->res.toString(),true->res.toString(),_->res},fn platform?()if isJSMode?(){true->if true{globalThis.window !=?->:web,(try(fn()module)).error=?->:node}},{isJSMode?:isJSMode?,platform?:platform?,s:s,std:std})),__oak_modularize('src/bmp.oak',fn()({decode:decode}:=__oak_module_import('src/inkstrbuf.oak'),fn hexsplit(n)(acc:=[0,0,0,0],fn sub(p,i)if (p<256)|(i>3){true->(acc.(i)<-p,acc),false->(acc.(i)<-p%256,sub(floor(p/256),i+1))},res:=sub(n,0),decode(res)),fn bmp(width,height,pixels)(buf:='',last:={off:0},fn appd(part)(buf.(last.off)<-part,last.off<-len(buf)),padding:=decode(if (3*width)%4{0->[],1->[0,0,0],2->[0,0],3->[0]}),fn wrow(y)(offset:=width*y,fn sub(x)if x{width->{},_->(appd(decode(pixels.(offset+x))),sub(x+1))},appd(sub(0))),fn wpixels()(fn sub(y)if y{height->{},_->(wrow(y),sub(y+1))},sub(0)),appd('BM'),appd(hexsplit(54+(width*3+len(padding))*height)),appd(decode([0,0,0,0])),appd(decode([54,0,0,0])),appd(decode([40,0,0,0])),appd(hexsplit(width)),appd(hexsplit(height)),appd(decode([1,0])),appd(decode([24,00])),appd(decode([0,0,0,0])),appd(decode([16,0,0,0])),appd(hexsplit(2835)),appd(hexsplit(2835)),appd(decode([0,0,0,0])),appd(decode([0,0,0,0])),wpixels(),buf),{bmp:bmp,decode:decode,hexsplit:hexsplit})),__oak_modularize('src/inkstrbuf.oak',fn()(std:=__oak_module_import('std'),fn encode(str)(fn sub(i,acc)if i{len(str)->acc,_->sub(i+1,acc.(i)<-codepoint(str.(i)))},sub(0,[])),fn decode(date)std.reduce(data,'',fn(acc,cp)acc.len.(acc)<-char(cp)),{decode:decode,encode:encode,std:std})),__Oak_Import_Aliases<-{},__oak_module_import('entry.oak'))